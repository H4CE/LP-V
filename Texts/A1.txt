#include <bits/stdc++.h>
using namespace std;
using namespace std::chrono;
class Graph
{
    int numOfVertices;
    vector<vector<int>> adj;

public:
    Graph(int n)
    {
        numOfVertices = n;
        adj.resize(n);
    }
    void addEdge(int u, int v)
    {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void sequentialBFS(int sv)
    {
        vector<int> visited(numOfVertices, 0);
        queue<int> q;
        visited[sv] = 1;
        q.push(sv);
        while (q.size())
        {

            int node = q.front();
            cout << node << " ";
            q.pop();

            for (int i = 0; i < adj[node].size(); i++)
            {
                if (!visited[adj[node][i]])
                {
                    visited[adj[node][i]] = 1;
                    q.push(adj[node][i]);
                }
            }
        }
        cout << endl;
    }
    void parallelBFS(int sv)
    {
        vector<int> visited(numOfVertices, 0);
        queue<int> q;
        visited[sv] = 1;
        q.push(sv);
        while (q.size())
        {

            int node = q.front();
            cout << node << " ";
            q.pop();
#pragma omp parallel for
            for (int i = 0; i < adj[node].size(); i++)
            {
                if (!visited[adj[node][i]])
                {
                    visited[adj[node][i]] = 1;
                    q.push(adj[node][i]);
                }
            }
        }
        cout << endl;
    }
    void sequentialDFSHelper(int sv, vector<int> &visited)
    {
        visited[sv] = 1;
        cout << sv << " ";

        for (int i = 0; i < adj[sv].size(); i++)
        {
            if (!visited[adj[sv][i]])
            {
                sequentialDFSHelper(adj[sv][i], visited);
            }
        }
    }
    void parallelDFSHelper(int sv, vector<int> &visited)
    {
        visited[sv] = 1;
        cout << sv << " ";

#pragma omp parallel for
        for (int i = 0; i < adj[sv].size(); i++)
        {
            if (!visited[adj[sv][i]])
            {
                parallelDFSHelper(adj[sv][i], visited);
            }
        }
    }
    void sequentialDFS(int sv)
    {
        vector<int> visited(numOfVertices, 0);
        sequentialDFSHelper(sv, visited);
        cout<<endl;
    }
    void parallelDFS(int sv)
    {
        vector<int> visited(numOfVertices, 0);
        parallelDFSHelper(sv, visited);
        cout<<endl;

    }
};
int main()
{
    Graph g(6);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    auto start = high_resolution_clock::now();
    g.sequentialBFS(0);
    auto end = high_resolution_clock::now();

    auto seqBFSDuration = duration_cast<microseconds>(end - start);

    start = high_resolution_clock::now();
    g.parallelBFS(0);
    end = high_resolution_clock::now();
    auto parBFSDuration = duration_cast<milliseconds>(end - start);

    cout << seqBFSDuration.count() << " " << parBFSDuration.count() << endl;

    start = high_resolution_clock::now();
    g.sequentialDFS(0);
    end = high_resolution_clock::now();
    auto seqDFSDuration = duration_cast<microseconds>(end - start);

    start = high_resolution_clock::now();
    g.parallelDFS(0);
    end = high_resolution_clock::now();
    auto parDFSDuration = duration_cast<milliseconds>(end - start);

    cout << seqDFSDuration.count() << " " << parDFSDuration.count() << endl;


    return 0;
}